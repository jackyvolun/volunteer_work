{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9173759,"sourceType":"datasetVersion","datasetId":5544062}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-26T20:26:21.690079Z","iopub.execute_input":"2024-08-26T20:26:21.691662Z","iopub.status.idle":"2024-08-26T20:26:22.252208Z","shell.execute_reply.started":"2024-08-26T20:26:21.691581Z","shell.execute_reply":"2024-08-26T20:26:22.250703Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T20:26:22.254794Z","iopub.execute_input":"2024-08-26T20:26:22.255434Z","iopub.status.idle":"2024-08-26T20:26:22.261767Z","shell.execute_reply.started":"2024-08-26T20:26:22.255392Z","shell.execute_reply":"2024-08-26T20:26:22.260340Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_excel('/kaggle/input/global-health-expenditure-analysis/GHED_data.XLSX')","metadata":{"execution":{"iopub.status.busy":"2024-08-26T20:26:22.263498Z","iopub.execute_input":"2024-08-26T20:26:22.263905Z","iopub.status.idle":"2024-08-26T20:28:00.731379Z","shell.execute_reply.started":"2024-08-26T20:26:22.263867Z","shell.execute_reply":"2024-08-26T20:28:00.729802Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-08-26T20:28:00.734686Z","iopub.execute_input":"2024-08-26T20:28:00.735292Z","iopub.status.idle":"2024-08-26T20:28:00.933260Z","shell.execute_reply.started":"2024-08-26T20:28:00.735255Z","shell.execute_reply":"2024-08-26T20:28:00.932004Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('COLUMN NAMES:\\n'+'-'*16)\nfor i in df.columns:\n    print(i)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T20:28:00.934773Z","iopub.execute_input":"2024-08-26T20:28:00.935116Z","iopub.status.idle":"2024-08-26T20:28:00.968381Z","shell.execute_reply.started":"2024-08-26T20:28:00.935077Z","shell.execute_reply":"2024-08-26T20:28:00.966642Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T20:28:00.970600Z","iopub.execute_input":"2024-08-26T20:28:00.971111Z","iopub.status.idle":"2024-08-26T20:28:01.004648Z","shell.execute_reply.started":"2024-08-26T20:28:00.971073Z","shell.execute_reply":"2024-08-26T20:28:01.003041Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T20:28:01.006523Z","iopub.execute_input":"2024-08-26T20:28:01.006878Z","iopub.status.idle":"2024-08-26T20:28:01.276130Z","shell.execute_reply.started":"2024-08-26T20:28:01.006849Z","shell.execute_reply":"2024-08-26T20:28:01.274616Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"info","metadata":{}},{"cell_type":"code","source":"sorted(df['country'].unique())","metadata":{"execution":{"iopub.status.busy":"2024-08-26T20:28:01.277737Z","iopub.execute_input":"2024-08-26T20:28:01.278185Z","iopub.status.idle":"2024-08-26T20:28:01.293994Z","shell.execute_reply.started":"2024-08-26T20:28:01.278145Z","shell.execute_reply":"2024-08-26T20:28:01.292298Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"unique country it contains","metadata":{}},{"cell_type":"code","source":"for i in sorted(df['year'].unique()):\n    print(i)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T20:28:01.297085Z","iopub.execute_input":"2024-08-26T20:28:01.297672Z","iopub.status.idle":"2024-08-26T20:28:01.308529Z","shell.execute_reply.started":"2024-08-26T20:28:01.297605Z","shell.execute_reply":"2024-08-26T20:28:01.306623Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"find the year it contains","metadata":{}},{"cell_type":"code","source":"def plot_category_single_year(df,category,year):\n    # create groupby and drop unwanted column\n    grouped = df.groupby(['country','year','category']).sum()\n    grouped.drop(['quantity_footnotes'],axis=1,inplace=True)\n    \n    # filter by category and year\n    filtered_by_category = grouped[grouped.index.isin([category], level=2)]\n    filtered_by_category = filtered_by_category[filtered_by_category.index.isin([year], level=1)]\n    \n    # remove unwanted multiindexes (year and category)\n    filtered_by_category = filtered_by_category.droplevel(1).copy()\n    filtered_by_category = filtered_by_category.droplevel(1).copy()   \n    \n    filtered_by_category.sort_values(by='quantity',ascending=False,inplace=True)\n    \n    filtered_by_category.plot.bar(figsize=[15,10])\n    ","metadata":{"execution":{"iopub.status.busy":"2024-08-26T20:28:12.381852Z","iopub.execute_input":"2024-08-26T20:28:12.382335Z","iopub.status.idle":"2024-08-26T20:28:12.393342Z","shell.execute_reply.started":"2024-08-26T20:28:12.382298Z","shell.execute_reply":"2024-08-26T20:28:12.391272Z"},"trusted":true},"execution_count":null,"outputs":[]}]}